import { c as create_ssr_component, v as validate_component, d as each, e as escape } from "../../../chunks/ssr.js";
import { P as Plus } from "../../../chunks/plus.js";
import { I as Icon } from "../../../chunks/Icon.js";
import { S as Shield } from "../../../chunks/shield.js";
const Check_circle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    [
      "path",
      {
        "d": "M22 11.08V12a10 10 0 1 1-5.93-9.14"
      }
    ],
    ["path", { "d": "m9 11 3 3L22 4" }]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "check-circle" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const Refresh_cw = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    [
      "path",
      {
        "d": "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"
      }
    ],
    ["path", { "d": "M21 3v5h-5" }],
    [
      "path",
      {
        "d": "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"
      }
    ],
    ["path", { "d": "M8 16H3v5" }]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "refresh-cw" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const css = {
  code: ".page-header.svelte-q1vrrs.svelte-q1vrrs{display:flex;justify-content:space-between;align-items:center;margin-bottom:2rem}.page-header.svelte-q1vrrs h2.svelte-q1vrrs{margin:0;color:#1e293b;font-size:1.875rem;font-weight:700}.domains-list.svelte-q1vrrs.svelte-q1vrrs{display:flex;flex-direction:column;gap:1.5rem}.domain-header.svelte-q1vrrs.svelte-q1vrrs{display:flex;justify-content:space-between;align-items:center}.domain-actions.svelte-q1vrrs.svelte-q1vrrs{display:flex;gap:0.5rem}.status-grid.svelte-q1vrrs.svelte-q1vrrs{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem;margin-bottom:1rem}.status-item.svelte-q1vrrs.svelte-q1vrrs{display:flex;justify-content:space-between;align-items:center;padding:0.75rem;background:#f8fafc;border-radius:0.375rem}.status-header.svelte-q1vrrs.svelte-q1vrrs{display:flex;align-items:center;gap:0.5rem;font-weight:500;color:#374151}.overall-status.svelte-q1vrrs.svelte-q1vrrs{display:flex;justify-content:space-between;align-items:center;padding:1rem;background:#f1f5f9;border-radius:0.375rem}.status-label.svelte-q1vrrs.svelte-q1vrrs{font-weight:600;color:#1e293b}.loading.svelte-q1vrrs.svelte-q1vrrs{display:flex;align-items:center;gap:0.5rem;justify-content:center;padding:2rem;color:#64748b}.dns-records.svelte-q1vrrs h4.svelte-q1vrrs{margin:0 0 1rem 0;color:#374151;font-size:0.875rem;font-weight:600}.record.svelte-q1vrrs.svelte-q1vrrs{margin-bottom:0.5rem;font-size:0.75rem}.record.svelte-q1vrrs strong.svelte-q1vrrs{color:#374151;margin-right:0.5rem}.record.svelte-q1vrrs code.svelte-q1vrrs{background:#f1f5f9;padding:0.25rem 0.5rem;border-radius:0.25rem;font-family:'Monaco', 'Menlo', 'Ubuntu Mono', monospace;color:#1e293b;word-break:break-all}.empty-state.svelte-q1vrrs.svelte-q1vrrs{text-align:center;padding:4rem 2rem;color:#64748b}.empty-state.svelte-q1vrrs h3.svelte-q1vrrs{margin:1rem 0 0.5rem 0;color:#374151;font-size:1.125rem;font-weight:600}.empty-state.svelte-q1vrrs p.svelte-q1vrrs{margin:0 0 2rem 0}@media(max-width: 768px){.page-header.svelte-q1vrrs.svelte-q1vrrs{flex-direction:column;align-items:flex-start;gap:1rem}.domain-header.svelte-q1vrrs.svelte-q1vrrs{flex-direction:column;align-items:flex-start;gap:1rem}.domain-actions.svelte-q1vrrs.svelte-q1vrrs{width:100%;justify-content:flex-start}.status-grid.svelte-q1vrrs.svelte-q1vrrs{grid-template-columns:1fr}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n\\timport { onMount } from 'svelte';\\n\\timport { Plus, RefreshCw, Shield, CheckCircle, XCircle, AlertTriangle } from 'lucide-svelte';\\n\\n\\t/** @type {Array<{id: number, domain: string, dkim_selector: string, verified_at: string|null, spf_record: string, dmarc_record: string, ptr_record: string}>} */\\n\\tlet domains = [];\\n\\t/** @type {Record<number, {domain: string, spf: {status: string, message: string}, dkim: {status: string, message: string}, dmarc: {status: string, message: string}, ptr: {status: string, message: string}, overall: string}>} */\\n\\tlet domainStatus = {};\\n\\tlet showAddDomain = false;\\n\\tlet loading = false;\\n\\n\\tonMount(async () => {\\n\\t\\tawait loadDomains();\\n\\t});\\n\\n\\tasync function loadDomains() {\\n\\t\\ttry {\\n\\t\\t\\tconst response = await fetch('/api/domains');\\n\\t\\t\\tif (response.ok) {\\n\\t\\t\\t\\tconst data = await response.json();\\n\\t\\t\\t\\tdomains = data.data || [];\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Load status for each domain\\n\\t\\t\\t\\tfor (const domain of domains) {\\n\\t\\t\\t\\t\\tawait loadDomainStatus(domain.id);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (error) {\\n\\t\\t\\tconsole.error('Failed to load domains:', error);\\n\\t\\t}\\n\\t}\\n\\n\\t/** @param {number} domainId */\\n\\tasync function loadDomainStatus(domainId) {\\n\\t\\ttry {\\n\\t\\t\\tconst response = await fetch(\`/api/domains/\${domainId}/status\`);\\n\\t\\t\\tif (response.ok) {\\n\\t\\t\\t\\tconst data = await response.json();\\n\\t\\t\\t\\tdomainStatus[domainId] = data.data;\\n\\t\\t\\t}\\n\\t\\t} catch (error) {\\n\\t\\t\\tconsole.error('Failed to load domain status:', error);\\n\\t\\t}\\n\\t}\\n\\n\\t/** @param {string} domain */\\n\\tasync function addDomain(domain) {\\n\\t\\tloading = true;\\n\\t\\ttry {\\n\\t\\t\\tconst response = await fetch('/api/domains', {\\n\\t\\t\\t\\tmethod: 'POST',\\n\\t\\t\\t\\theaders: { 'Content-Type': 'application/json' },\\n\\t\\t\\t\\tbody: JSON.stringify({ domain })\\n\\t\\t\\t});\\n\\t\\t\\t\\n\\t\\t\\tif (response.ok) {\\n\\t\\t\\t\\tawait loadDomains();\\n\\t\\t\\t\\tshowAddDomain = false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\talert('Failed to add domain');\\n\\t\\t\\t}\\n\\t\\t} catch (error) {\\n\\t\\t\\tconsole.error('Failed to add domain:', error);\\n\\t\\t\\talert('Failed to add domain');\\n\\t\\t} finally {\\n\\t\\t\\tloading = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/** @param {number} domainId */\\n\\tasync function rotateDKIM(domainId) {\\n\\t\\tloading = true;\\n\\t\\ttry {\\n\\t\\t\\tconst response = await fetch(\`/api/domains/\${domainId}/dkim/rotate\`, {\\n\\t\\t\\t\\tmethod: 'POST'\\n\\t\\t\\t});\\n\\t\\t\\t\\n\\t\\t\\tif (response.ok) {\\n\\t\\t\\t\\tawait loadDomains();\\n\\t\\t\\t\\tawait loadDomainStatus(domainId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\talert('Failed to rotate DKIM keys');\\n\\t\\t\\t}\\n\\t\\t} catch (error) {\\n\\t\\t\\tconsole.error('Failed to rotate DKIM keys:', error);\\n\\t\\t\\talert('Failed to rotate DKIM keys');\\n\\t\\t} finally {\\n\\t\\t\\tloading = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/** @param {string} status */\\n\\tfunction getStatusIcon(status) {\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 'pass':\\n\\t\\t\\t\\treturn CheckCircle;\\n\\t\\t\\tcase 'fail':\\n\\t\\t\\t\\treturn XCircle;\\n\\t\\t\\tcase 'warning':\\n\\t\\t\\t\\treturn AlertTriangle;\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\treturn Shield;\\n\\t\\t}\\n\\t}\\n\\n\\t/** @param {string} status */\\n\\tfunction getStatusColor(status) {\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 'pass':\\n\\t\\t\\t\\treturn 'success';\\n\\t\\t\\tcase 'fail':\\n\\t\\t\\t\\treturn 'error';\\n\\t\\t\\tcase 'warning':\\n\\t\\t\\t\\treturn 'warning';\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\treturn 'gray';\\n\\t\\t}\\n\\t}\\n<\/script>\\n\\n<svelte:head>\\n\\t<title>Domains - Newsletter Platform</title>\\n</svelte:head>\\n\\n<div class=\\"container\\">\\n\\t<header class=\\"header\\">\\n\\t\\t<h1>Newsletter Platform</h1>\\n\\t\\t<nav class=\\"nav\\">\\n\\t\\t\\t<a href=\\"/\\" class=\\"nav-link\\">Dashboard</a>\\n\\t\\t\\t<a href=\\"/domains\\" class=\\"nav-link active\\">Domains</a>\\n\\t\\t\\t<a href=\\"/lists\\" class=\\"nav-link\\">Lists</a>\\n\\t\\t\\t<a href=\\"/campaigns\\" class=\\"nav-link\\">Campaigns</a>\\n\\t\\t\\t<a href=\\"/settings\\" class=\\"nav-link\\">Settings</a>\\n\\t\\t</nav>\\n\\t</header>\\n\\n\\t<main class=\\"main\\">\\n\\t\\t<div class=\\"page-header\\">\\n\\t\\t\\t<h2>Domains</h2>\\n\\t\\t\\t<button class=\\"btn btn-primary\\" on:click={() => showAddDomain = true}>\\n\\t\\t\\t\\t<Plus size={16} />\\n\\t\\t\\t\\tAdd Domain\\n\\t\\t\\t</button>\\n\\t\\t</div>\\n\\n\\t\\t{#if showAddDomain}\\n\\t\\t\\t<div class=\\"card\\">\\n\\t\\t\\t\\t<h3>Add New Domain</h3>\\n          <form on:submit|preventDefault={async (e) => {\\n            const form = e.target;\\n            if (!form) return;\\n            const formData = new FormData(/** @type {HTMLFormElement} */ (form));\\n            const domain = formData.get('domain');\\n\\t\\t\\t\\t\\tif (domain && typeof domain === 'string') {\\n\\t\\t\\t\\t\\t\\tawait addDomain(domain);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}}>\\n\\t\\t\\t\\t\\t<div class=\\"form-group\\">\\n\\t\\t\\t\\t\\t\\t<label for=\\"domain\\" class=\\"form-label\\">Domain Name</label>\\n\\t\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t\\t\\ttype=\\"text\\"\\n\\t\\t\\t\\t\\t\\t\\tid=\\"domain\\"\\n\\t\\t\\t\\t\\t\\t\\tname=\\"domain\\"\\n\\t\\t\\t\\t\\t\\t\\tclass=\\"form-input\\"\\n\\t\\t\\t\\t\\t\\t\\tplaceholder=\\"news.example.com\\"\\n\\t\\t\\t\\t\\t\\t\\trequired\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\"card-footer\\">\\n\\t\\t\\t\\t\\t\\t<button type=\\"button\\" class=\\"btn btn-secondary\\" on:click={() => showAddDomain = false}>\\n\\t\\t\\t\\t\\t\\t\\tCancel\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<button type=\\"submit\\" class=\\"btn btn-primary\\" disabled={loading}>\\n\\t\\t\\t\\t\\t\\t\\t{loading ? 'Adding...' : 'Add Domain'}\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</form>\\n\\t\\t\\t</div>\\n\\t\\t{/if}\\n\\n\\t\\t<div class=\\"domains-list\\">\\n\\t\\t\\t{#each domains as domain (domain.id)}\\n\\t\\t\\t\\t<div class=\\"card\\">\\n\\t\\t\\t\\t\\t<div class=\\"card-header\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\"domain-header\\">\\n\\t\\t\\t\\t\\t\\t\\t<h3 class=\\"card-title\\">{domain.domain}</h3>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"domain-actions\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\"btn btn-secondary btn-sm\\" \\n\\t\\t\\t\\t\\t\\t\\t\\t\\ton:click={() => loadDomainStatus(domain.id)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdisabled={loading}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<RefreshCw size={14} />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tRefresh\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\"btn btn-secondary btn-sm\\" \\n\\t\\t\\t\\t\\t\\t\\t\\t\\ton:click={() => rotateDKIM(domain.id)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdisabled={loading}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tRotate DKIM\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\"card-body\\">\\n\\t\\t\\t\\t\\t\\t{#if domainStatus[domain.id]}\\n\\t\\t\\t\\t\\t\\t\\t{@const status = domainStatus[domain.id]}\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"status-grid\\">\\n                <div class=\\"status-item\\">\\n                  <div class=\\"status-header\\">\\n                    <CheckCircle size={16} />\\n                    <span>SPF</span>\\n                  </div>\\n                  <span class=\\"badge badge-{getStatusColor(status.spf.status)}\\">\\n                    {status.spf.status}\\n                  </span>\\n                </div>\\n\\n                <div class=\\"status-item\\">\\n                  <div class=\\"status-header\\">\\n                    <CheckCircle size={16} />\\n                    <span>DKIM</span>\\n                  </div>\\n                  <span class=\\"badge badge-{getStatusColor(status.dkim.status)}\\">\\n                    {status.dkim.status}\\n                  </span>\\n                </div>\\n\\n                <div class=\\"status-item\\">\\n                  <div class=\\"status-header\\">\\n                    <CheckCircle size={16} />\\n                    <span>DMARC</span>\\n                  </div>\\n                  <span class=\\"badge badge-{getStatusColor(status.dmarc.status)}\\">\\n                    {status.dmarc.status}\\n                  </span>\\n                </div>\\n\\n                <div class=\\"status-item\\">\\n                  <div class=\\"status-header\\">\\n                    <CheckCircle size={16} />\\n                    <span>PTR</span>\\n                  </div>\\n                  <span class=\\"badge badge-{getStatusColor(status.ptr.status)}\\">\\n                    {status.ptr.status}\\n                  </span>\\n                </div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"overall-status\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"status-label\\">Overall Status:</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"badge badge-{getStatusColor(status.overall)}\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{status.overall}\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t{:else}\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"loading\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\"spinner\\"></div>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>Checking domain status...</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t<div class=\\"card-footer\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\"dns-records\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>DNS Records</h4>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"record\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>SPF:</strong>\\n\\t\\t\\t\\t\\t\\t\\t\\t<code>{domain.spf_record}</code>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"record\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>DKIM:</strong>\\n\\t\\t\\t\\t\\t\\t\\t\\t<code>{domain.dkim_selector}._domainkey.{domain.domain}</code>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"record\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>DMARC:</strong>\\n\\t\\t\\t\\t\\t\\t\\t\\t<code>_dmarc.{domain.domain}</code>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"record\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>PTR:</strong>\\n\\t\\t\\t\\t\\t\\t\\t\\t<code>mail.{domain.domain}</code>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{/each}\\n\\n\\t\\t\\t{#if domains.length === 0}\\n\\t\\t\\t\\t<div class=\\"empty-state\\">\\n\\t\\t\\t\\t\\t<Shield size={48} />\\n\\t\\t\\t\\t\\t<h3>No domains configured</h3>\\n\\t\\t\\t\\t\\t<p>Add your first domain to start sending newsletters.</p>\\n\\t\\t\\t\\t\\t<button class=\\"btn btn-primary\\" on:click={() => showAddDomain = true}>\\n\\t\\t\\t\\t\\t\\t<Plus size={16} />\\n\\t\\t\\t\\t\\t\\tAdd Domain\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{/if}\\n\\t\\t</div>\\n\\t</main>\\n</div>\\n\\n<style>\\n\\t.page-header {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tmargin-bottom: 2rem;\\n\\t}\\n\\n\\t.page-header h2 {\\n\\t\\tmargin: 0;\\n\\t\\tcolor: #1e293b;\\n\\t\\tfont-size: 1.875rem;\\n\\t\\tfont-weight: 700;\\n\\t}\\n\\n\\t.domains-list {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 1.5rem;\\n\\t}\\n\\n\\t.domain-header {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t}\\n\\n\\t.domain-actions {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 0.5rem;\\n\\t}\\n\\n\\t.status-grid {\\n\\t\\tdisplay: grid;\\n\\t\\tgrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n\\t\\tgap: 1rem;\\n\\t\\tmargin-bottom: 1rem;\\n\\t}\\n\\n\\t.status-item {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tpadding: 0.75rem;\\n\\t\\tbackground: #f8fafc;\\n\\t\\tborder-radius: 0.375rem;\\n\\t}\\n\\n\\t.status-header {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tgap: 0.5rem;\\n\\t\\tfont-weight: 500;\\n\\t\\tcolor: #374151;\\n\\t}\\n\\n\\t.overall-status {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tpadding: 1rem;\\n\\t\\tbackground: #f1f5f9;\\n\\t\\tborder-radius: 0.375rem;\\n\\t}\\n\\n\\t.status-label {\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #1e293b;\\n\\t}\\n\\n\\t.loading {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tgap: 0.5rem;\\n\\t\\tjustify-content: center;\\n\\t\\tpadding: 2rem;\\n\\t\\tcolor: #64748b;\\n\\t}\\n\\n\\t.dns-records h4 {\\n\\t\\tmargin: 0 0 1rem 0;\\n\\t\\tcolor: #374151;\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tfont-weight: 600;\\n\\t}\\n\\n\\t.record {\\n\\t\\tmargin-bottom: 0.5rem;\\n\\t\\tfont-size: 0.75rem;\\n\\t}\\n\\n\\t.record strong {\\n\\t\\tcolor: #374151;\\n\\t\\tmargin-right: 0.5rem;\\n\\t}\\n\\n\\t.record code {\\n\\t\\tbackground: #f1f5f9;\\n\\t\\tpadding: 0.25rem 0.5rem;\\n\\t\\tborder-radius: 0.25rem;\\n\\t\\tfont-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\\n\\t\\tcolor: #1e293b;\\n\\t\\tword-break: break-all;\\n\\t}\\n\\n\\t.empty-state {\\n\\t\\ttext-align: center;\\n\\t\\tpadding: 4rem 2rem;\\n\\t\\tcolor: #64748b;\\n\\t}\\n\\n\\t.empty-state h3 {\\n\\t\\tmargin: 1rem 0 0.5rem 0;\\n\\t\\tcolor: #374151;\\n\\t\\tfont-size: 1.125rem;\\n\\t\\tfont-weight: 600;\\n\\t}\\n\\n\\t.empty-state p {\\n\\t\\tmargin: 0 0 2rem 0;\\n\\t}\\n\\n\\t@media (max-width: 768px) {\\n\\t\\t.page-header {\\n\\t\\t\\tflex-direction: column;\\n\\t\\t\\talign-items: flex-start;\\n\\t\\t\\tgap: 1rem;\\n\\t\\t}\\n\\n\\t\\t.domain-header {\\n\\t\\t\\tflex-direction: column;\\n\\t\\t\\talign-items: flex-start;\\n\\t\\t\\tgap: 1rem;\\n\\t\\t}\\n\\n\\t\\t.domain-actions {\\n\\t\\t\\twidth: 100%;\\n\\t\\t\\tjustify-content: flex-start;\\n\\t\\t}\\n\\n\\t\\t.status-grid {\\n\\t\\t\\tgrid-template-columns: 1fr;\\n\\t\\t}\\n\\t}\\n</style>\\n"],"names":[],"mappings":"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"}`
};
function getStatusColor(status) {
  switch (status) {
    case "pass":
      return "success";
    case "fail":
      return "error";
    case "warning":
      return "warning";
    default:
      return "gray";
  }
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let domains = [];
  let domainStatus = {};
  $$result.css.add(css);
  return `${$$result.head += `<!-- HEAD_svelte-1fnncfw_START -->${$$result.title = `<title>Domains - Newsletter Platform</title>`, ""}<!-- HEAD_svelte-1fnncfw_END -->`, ""} <div class="container"><header class="header" data-svelte-h="svelte-ywfs9p"><h1>Newsletter Platform</h1> <nav class="nav"><a href="/" class="nav-link">Dashboard</a> <a href="/domains" class="nav-link active">Domains</a> <a href="/lists" class="nav-link">Lists</a> <a href="/campaigns" class="nav-link">Campaigns</a> <a href="/settings" class="nav-link">Settings</a></nav></header> <main class="main"><div class="page-header svelte-q1vrrs"><h2 class="svelte-q1vrrs" data-svelte-h="svelte-l19h9x">Domains</h2> <button class="btn btn-primary">${validate_component(Plus, "Plus").$$render($$result, { size: 16 }, {}, {})}
				Add Domain</button></div> ${``} <div class="domains-list svelte-q1vrrs">${each(domains, (domain) => {
    return `<div class="card"><div class="card-header"><div class="domain-header svelte-q1vrrs"><h3 class="card-title">${escape(domain.domain)}</h3> <div class="domain-actions svelte-q1vrrs"><button class="btn btn-secondary btn-sm" ${""}>${validate_component(Refresh_cw, "RefreshCw").$$render($$result, { size: 14 }, {}, {})}
									Refresh</button> <button class="btn btn-secondary btn-sm" ${""}>Rotate DKIM
								</button></div> </div></div> <div class="card-body">${domainStatus[domain.id] ? (() => {
      let status = domainStatus[domain.id];
      return ` <div class="status-grid svelte-q1vrrs"><div class="status-item svelte-q1vrrs"><div class="status-header svelte-q1vrrs">${validate_component(Check_circle, "CheckCircle").$$render($$result, { size: 16 }, {}, {})} <span data-svelte-h="svelte-1h3d3s7">SPF</span></div> <span class="${"badge badge-" + escape(getStatusColor(status.spf.status), true) + " svelte-q1vrrs"}">${escape(status.spf.status)} </span></div> <div class="status-item svelte-q1vrrs"><div class="status-header svelte-q1vrrs">${validate_component(Check_circle, "CheckCircle").$$render($$result, { size: 16 }, {}, {})} <span data-svelte-h="svelte-1d2t045">DKIM</span></div> <span class="${"badge badge-" + escape(getStatusColor(status.dkim.status), true) + " svelte-q1vrrs"}">${escape(status.dkim.status)} </span></div> <div class="status-item svelte-q1vrrs"><div class="status-header svelte-q1vrrs">${validate_component(Check_circle, "CheckCircle").$$render($$result, { size: 16 }, {}, {})} <span data-svelte-h="svelte-1lo7vdp">DMARC</span></div> <span class="${"badge badge-" + escape(getStatusColor(status.dmarc.status), true) + " svelte-q1vrrs"}">${escape(status.dmarc.status)} </span></div> <div class="status-item svelte-q1vrrs"><div class="status-header svelte-q1vrrs">${validate_component(Check_circle, "CheckCircle").$$render($$result, { size: 16 }, {}, {})} <span data-svelte-h="svelte-s68k1g">PTR</span></div> <span class="${"badge badge-" + escape(getStatusColor(status.ptr.status), true) + " svelte-q1vrrs"}">${escape(status.ptr.status)}</span> </div></div> <div class="overall-status svelte-q1vrrs"><span class="status-label svelte-q1vrrs" data-svelte-h="svelte-ce44cv">Overall Status:</span> <span class="${"badge badge-" + escape(getStatusColor(status.overall), true) + " svelte-q1vrrs"}">${escape(status.overall)}</span> </div>`;
    })() : `<div class="loading svelte-q1vrrs" data-svelte-h="svelte-1vhsmgu"><div class="spinner"></div> <span>Checking domain status...</span> </div>`}</div> <div class="card-footer"><div class="dns-records svelte-q1vrrs"><h4 class="svelte-q1vrrs" data-svelte-h="svelte-1t1bkhh">DNS Records</h4> <div class="record svelte-q1vrrs"><strong class="svelte-q1vrrs" data-svelte-h="svelte-1qw1chj">SPF:</strong> <code class="svelte-q1vrrs">${escape(domain.spf_record)}</code></div> <div class="record svelte-q1vrrs"><strong class="svelte-q1vrrs" data-svelte-h="svelte-185fhfz">DKIM:</strong> <code class="svelte-q1vrrs">${escape(domain.dkim_selector)}._domainkey.${escape(domain.domain)}</code></div> <div class="record svelte-q1vrrs"><strong class="svelte-q1vrrs" data-svelte-h="svelte-170d5tl">DMARC:</strong> <code class="svelte-q1vrrs">_dmarc.${escape(domain.domain)}</code></div> <div class="record svelte-q1vrrs"><strong class="svelte-q1vrrs" data-svelte-h="svelte-1kindn8">PTR:</strong> <code class="svelte-q1vrrs">mail.${escape(domain.domain)}</code></div> </div></div> </div>`;
  })} ${domains.length === 0 ? `<div class="empty-state svelte-q1vrrs">${validate_component(Shield, "Shield").$$render($$result, { size: 48 }, {}, {})} <h3 class="svelte-q1vrrs" data-svelte-h="svelte-1m8g6t0">No domains configured</h3> <p class="svelte-q1vrrs" data-svelte-h="svelte-1o0wojb">Add your first domain to start sending newsletters.</p> <button class="btn btn-primary">${validate_component(Plus, "Plus").$$render($$result, { size: 16 }, {}, {})}
						Add Domain</button></div>` : ``}</div></main> </div>`;
});
export {
  Page as default
};
